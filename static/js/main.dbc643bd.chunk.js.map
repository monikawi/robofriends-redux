{"version":3,"sources":["reportWebVitals.js","serviceWorkerRegistration.js","constants.js","actions.js","api/api.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reducers.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_RESOLVED","REQUEST_ROBOTS_REJECTED","requestRobots","dispatch","link","type","fetch","response","json","data","payload","Card","id","name","email","className","alt","src","CardList","cards","map","card","SearchBox","onChange","placeholder","Scroll","children","style","overflowY","height","connect","searchField","searchRobots","robots","isPending","onSearchChange","event","text","target","value","onRequestRobots","store","useEffect","filteredList","filter","item","toLowerCase","includes","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.dbc643bd.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_RESOLVED = 'REQUEST_ROBOTS_RESOLVED';\r\nexport const REQUEST_ROBOTS_REJECTED = 'REQUEST_ROBOTS_REJECTED';","import { apiCall } from './api/api'\r\n\r\nimport { \r\n  CHANGE_SEARCH_FIELD, \r\n  REQUEST_ROBOTS_PENDING,  \r\n  REQUEST_ROBOTS_RESOLVED,\r\n  REQUEST_ROBOTS_REJECTED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({type: REQUEST_ROBOTS_PENDING});\r\n  apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_RESOLVED, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_REJECTED, payload: error}))\r\n}","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","import React from 'react';\r\n \r\nconst Card = ({ id, name, email }) => {\r\n  return (  \r\n    <div className=\"bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5\">\r\n      <img alt=\"pic\" src={`https://robohash.org/${ id }?200x200`} />\r\n      <>\r\n        <h2>{ name }</h2>\r\n        <p>{ email }</p>\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ cards }) => {\r\n  return (  \r\n    cards.map(card => (\r\n      <Card key={card.id} id={card.id} name={card.name} email={card.email} />\r\n    ))\r\n  );\r\n}\r\n \r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ onChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input onChange={onChange} className=\"pa1 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"Search bots\"/>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default SearchBox;","import React from 'react';\r\n \r\nconst Scroll = ({ children }) => {\r\n  return (  \r\n    <div style={{overflowY: 'scroll', height: '800px'}}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default Scroll;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { requestRobots, setSearchField } from '../actions';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchField: state.searchRobots.searchField,\r\n  robots: state.requestRobots.robots,\r\n  isPending: state.requestRobots.isPending,\r\n  error: state.requestRobots.error\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n  onRequestRobots: () => dispatch(requestRobots())\r\n});\r\n\r\nconst App = ({store, searchField, onSearchChange, onRequestRobots, robots, isPending}) => {\r\n\r\n\r\n  useEffect(() => {\r\n    onRequestRobots();\r\n  }, [])\r\n\r\n\r\n\r\n  const filteredList = robots.filter(item => item.name.toLowerCase().includes(searchField));\r\n\r\n\r\n  return (  \r\n    <div className=\"tc\">\r\n      <h1 className=\"f1\">RoboFriends</h1>\r\n      <SearchBox onChange={onSearchChange} />\r\n      {isPending ? (\r\n        <h2>Loading..</h2>\r\n      ) : (\r\n        <Scroll>\r\n          <CardList cards={filteredList} />\r\n        </Scroll>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n  CHANGE_SEARCH_FIELD, \r\n  REQUEST_ROBOTS_PENDING,  \r\n  REQUEST_ROBOTS_RESOLVED,\r\n  REQUEST_ROBOTS_REJECTED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: null\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_RESOLVED:\r\n      return { ...state,  robots: action.payload, isPending: false};\r\n    case REQUEST_ROBOTS_REJECTED:\r\n      return { ...state, error: action.payload, isPending: false};\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, createStore, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({requestRobots, searchRobots})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store} >\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}