{"version":3,"sources":["reportWebVitals.js","constants.js","actions.js","api/api.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reducers.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_RESOLVED","REQUEST_ROBOTS_REJECTED","requestRobots","dispatch","link","type","fetch","response","json","data","payload","catch","error","Card","id","name","email","className","alt","src","CardList","cards","map","card","SearchBox","onChange","placeholder","Scroll","children","style","overflowY","height","connect","state","searchField","searchRobots","robots","isPending","onSearchChange","event","text","target","value","onRequestRobots","store","useEffect","filteredList","filter","item","toLowerCase","includes","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13dbe82f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_RESOLVED = 'REQUEST_ROBOTS_RESOLVED';\r\nexport const REQUEST_ROBOTS_REJECTED = 'REQUEST_ROBOTS_REJECTED';","import { apiCall } from './api/api'\r\n\r\nimport { \r\n  CHANGE_SEARCH_FIELD, \r\n  REQUEST_ROBOTS_PENDING,  \r\n  REQUEST_ROBOTS_RESOLVED,\r\n  REQUEST_ROBOTS_REJECTED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({type: REQUEST_ROBOTS_PENDING});\r\n  apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_RESOLVED, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_REJECTED, payload: error}))\r\n}","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","import React from 'react';\r\n \r\nconst Card = ({ id, name, email }) => {\r\n  return (  \r\n    <div className=\"bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5\">\r\n      <img alt=\"pic\" src={`https://robohash.org/${ id }?200x200`} />\r\n      <>\r\n        <h2>{ name }</h2>\r\n        <p>{ email }</p>\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ cards }) => {\r\n  return (  \r\n    cards.map(card => (\r\n      <Card key={card.id} id={card.id} name={card.name} email={card.email} />\r\n    ))\r\n  );\r\n}\r\n \r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ onChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input onChange={onChange} className=\"pa1 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"Search bots\"/>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default SearchBox;","import React from 'react';\r\n \r\nconst Scroll = ({ children }) => {\r\n  return (  \r\n    <div style={{overflowY: 'scroll', height: '800px'}}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default Scroll;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { requestRobots, setSearchField } from '../actions';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchField: state.searchRobots.searchField,\r\n  robots: state.requestRobots.robots,\r\n  isPending: state.requestRobots.isPending,\r\n  error: state.requestRobots.error\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n  onRequestRobots: () => dispatch(requestRobots())\r\n});\r\n\r\nconst App = ({store, searchField, onSearchChange, onRequestRobots, robots, isPending}) => {\r\n\r\n\r\n  useEffect(() => {\r\n    onRequestRobots();\r\n  }, [])\r\n\r\n\r\n\r\n  const filteredList = robots.filter(item => item.name.toLowerCase().includes(searchField));\r\n\r\n\r\n  return (  \r\n    <div className=\"tc\">\r\n      <h1 className=\"f1\">RoboFriends</h1>\r\n      <SearchBox onChange={onSearchChange} />\r\n      {isPending ? (\r\n        <h2>Loading..</h2>\r\n      ) : (\r\n        <Scroll>\r\n          <CardList cards={filteredList} />\r\n        </Scroll>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n  CHANGE_SEARCH_FIELD, \r\n  REQUEST_ROBOTS_PENDING,  \r\n  REQUEST_ROBOTS_RESOLVED,\r\n  REQUEST_ROBOTS_REJECTED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: null\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_RESOLVED:\r\n      return { ...state,  robots: action.payload, isPending: false};\r\n    case REQUEST_ROBOTS_REJECTED:\r\n      return { ...state, error: action.payload, isPending: false};\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({requestRobots, searchRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}